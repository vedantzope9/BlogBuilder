@model BlogBuilder.DTOs.BlogDTO
@{
    ViewData["Title"] = "Create Blog";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Quill Editor + Google Fonts -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Figtree:wght@400;600&display=swap" rel="stylesheet">

<style>
    :root {
        --bg-light: #fdfdfd;
        --text-light: #111;
        --bg-dark: #121212;
        --text-dark: #f1f1f1;
        --card-light: #fff;
        --card-dark: #1e1e1e;
        --accent: #7f5af0;
        --input-border: #ccc;
        --gradient: linear-gradient(to right, #7f5af0, #6246ea);
    }

    body[data-theme='light'] {
        background: var(--bg-light);
        color: var(--text-light);
    }

    body[data-theme='dark'] {
        background: var(--bg-dark);
        color: var(--text-dark);
    }

    .theme-toggle {
        position: fixed;
        top: 1rem;
        right: 1rem;
        background: var(--gradient);
        color: white;
        border: none;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        z-index: 1000;
    }

    .blog-container {
        max-width: 900px;
        margin: auto;
        padding: 2rem;
        font-family: 'Figtree', sans-serif;
        transition: background 0.4s, color 0.4s;
    }

    .form-control, .ql-editor, .ql-toolbar {
        background-color: inherit;
        color: inherit;
        border: 1px solid var(--input-border);
    }

    input[type="text"], input[type="file"] {
        padding: 0.6rem;
        width: 100%;
        margin-bottom: 1rem;
        border-radius: 6px;
    }

    .blog-title {
        text-align: center;
        font-size: 2.3rem;
        background: var(--gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1.5rem;
    }

    .btn-submit {
        background: var(--gradient);
        color: white;
        border: none;
        padding: 0.7rem 1.5rem;
        border-radius: 8px;
        font-weight: bold;
        transition: transform 0.2s ease, box-shadow 0.2s;
    }

        .btn-submit:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(127, 90, 240, 0.3);
        }

    .ql-container {
        min-height: 250px;
    }

        .ql-toolbar.ql-snow, .ql-container.ql-snow {
            border-radius: 6px;
        }

    #imagePreview {
        max-width: 200px;
        margin-top: 10px;
        display: none;
        border-radius: 6px;
    }
</style>

<button class="theme-toggle" onclick="toggleTheme()">🌗 Toggle Theme</button>

<div class="blog-container">
    <h2 class="blog-title">✍️ Create Your Blog</h2>

    <form id="createBlogForm" enctype="multipart/form-data">
        <input type="text" name="BLOG_NAME" placeholder="Enter Blog Title" required />
        <input type="text" name="TOPIC_NAME" placeholder="Enter Blog Topic" required />

        <input type="file" name="image" accept="image/*" />
        <img id="imagePreview" alt="Preview" />

        <div id="editor"></div>

        <div style="text-align:center; margin-top: 1.5rem;">
            <button type="submit" class="btn-submit">🚀 Publish</button>
            <a href="/Blog/Index" class="btn btn-secondary ms-2">Cancel</a>
        </div>
    </form>
</div>

<!-- Quill and Scripts -->
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
<script>
    let quill;

    document.addEventListener("DOMContentLoaded", () => {
        // Restore theme
        const savedTheme = localStorage.getItem("theme") || "light";
        setTheme(savedTheme);

        // Init Quill
        quill = new Quill('#editor', {
            theme: 'snow',
            placeholder: "Start writing your blog...",
            modules: {
                toolbar: [
                    [{ 'font': [] }, { 'size': [] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                    [{ 'align': [] }],
                    ['link', 'image', 'code-block'],
                    ['clean']
                ]
            }
        });

        addClientFileValidation();
        setupFormSubmit();
    });

    function toggleTheme() {
        const currentTheme = document.body.getAttribute('data-theme') || 'light';
        setTheme(currentTheme === 'light' ? 'dark' : 'light');
    }

    function setTheme(theme) {
        document.body.setAttribute('data-theme', theme);
        localStorage.setItem('theme', theme);
    }

    function addClientFileValidation() {
        const fileInput = document.querySelector('input[type="file"][name="image"]');
        const preview = document.getElementById('imagePreview');
        const MAX_BYTES = 5 * 1024 * 1024;

        fileInput.addEventListener('change', (e) => {
            const f = e.target.files[0];
            if (!f) {
                // No file selected or cancel pressed
                preview.style.display = 'none';
                preview.src = '';
                return;
            }

            if (!/^image\/(png|jpe?g|webp|gif)$/i.test(f.type)) {
                alert('Please upload an image (png, jpg, webp, gif).');
                e.target.value = '';
                preview.style.display = 'none';
                return;
            }

            if (f.size > MAX_BYTES) {
                alert('Image too large. Max 5MB allowed.');
                e.target.value = '';
                preview.style.display = 'none';
                return;
            }

            // Show preview
            preview.src = URL.createObjectURL(f);
            preview.style.display = 'block';
        });
    }

    function setupFormSubmit() {
        const form = document.getElementById("createBlogForm");
        const jwtToken = localStorage.getItem("jwtToken");
        const userId = localStorage.getItem("userid");

        form.addEventListener("submit", function (e) {
            e.preventDefault();

            if (!jwtToken || !userId) {
                alert("Login required.");
                window.location.href = "/User/LoginUser";
                return;
            }

            const formData = new FormData(form);
            formData.append("BLOG_CONTENT", quill.root.innerHTML);
            formData.append("USERID", userId);
            formData.append("isUpdated", false);

            fetch("/Blog/CreateBlog", {
                method: "POST",
                headers: { "Authorization": `Bearer ${jwtToken}` },
                body: formData
            })
            .then(res => {
                if (!res.ok) throw new Error("Something went wrong.");
                return res.text();
            })
            .then(() => {
                alert("Blog created!");
                window.location.href = "/Blog/Index";
            })
            .catch(err => {
                console.error(err);
                alert("Error: " + err.message);
            });
        });
    }
</script>
    
@model BlogBuilder.DTOs.BlogDTO
@{
    ViewData["Title"] = Model.BLOG_NAME;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        transition: background-color 0.5s, color 0.5s;
        background-color: #f4f4f9;
        color: #222;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        body.dark-mode {
            background-color: #121212;
            color: #e0e0e0;
        }

    .blog-detail-wrapper {
        max-width: 960px;
        margin: 2rem auto;
        padding: 2rem;
        background-color: #fff;
        border-radius: 16px;
        box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1);
        animation: fadeIn 1s ease;
    }

    body.dark-mode .blog-detail-wrapper {
        background-color: #1e1e1e;
        box-shadow: 0 25px 50px rgba(255, 255, 255, 0.05);
    }

    .blog-title {
        font-size: 2rem;
        font-weight: 700;
        color: #6a1b9a;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    body.dark-mode .blog-title {
        color: #dcbfff;
    }

    .edited-tag {
        font-style: italic;
        font-size: 0.9rem;
        color: #e67e22;
    }

    body.dark-mode .edited-tag {
        color: #f39c12;
    }

    .blog-meta {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 1rem;
    }

    body.dark-mode .blog-meta {
        color: #aaa;
    }

    .blog-topic {
        font-size: 1rem;
        font-weight: 500;
        color: #00897b;
        margin-bottom: 0.5rem;
    }

    body.dark-mode .blog-topic {
        color: #80cbc4;
    }

    .blog-image {
        width: 100%;
        height: auto;
        border-radius: 12px;
        margin: 1rem 0;
    }

    .blog-content {
        font-size: 1.1rem;
        line-height: 1.8;
        margin-top: 1rem;
    }

    .comments-section {
        margin-top: 3rem;
        border-top: 2px solid #ddd;
        padding-top: 1.5rem;
    }

    body.dark-mode .comments-section {
        border-color: #444;
    }

    .comment {
        padding: 1rem 0;
        border-bottom: 1px solid #e0e0e0;
    }

    body.dark-mode .comment {
        border-color: #333;
    }

    .comment-username {
        font-weight: bold;
        color: #2980b9;
    }

    .comment-date {
        font-size: 0.8rem;
        color: #999;
        margin-left: 1rem;
    }

    .comment-text {
        margin-top: 0.5rem;
        font-size: 1rem;
    }

    .back-btn {
        display: inline-block;
        margin-top: 1rem;
        background: #6a1b9a;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        text-decoration: none;
        transition: background 0.3s;
    }

        .back-btn:hover {
            background: #4a0072;
        }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="blog-detail-wrapper">
    <div class="blog-title">
        @Model.BLOG_NAME
        @if (Model.isUpdated)
        {
            <span class="edited-tag">(Edited)</span>
        }
    </div>

    <div class="blog-topic">Topic: @Model.TOPIC_NAME</div>

    <div class="blog-meta" id="blog-meta" data-userid="@Model.USERID">
        Author: Loading... • @Model.MODIFIED_DATE
    </div>


    @if (Model.IMAGE_DATA != null)
    {
        var base64Image = Convert.ToBase64String(Model.IMAGE_DATA);
        <img class="blog-image" src="data:image/png;base64,@base64Image" alt="Blog Image" />
    }

    <div class="blog-content">
        @Html.Raw(Model.BLOG_CONTENT)
    </div>

    <div class="comments-section">
        <h4>Comments</h4>
        @if (Model.BLOG_COMMENTS.Any())
        {
            foreach (var comment in Model.BLOG_COMMENTS)
            {
                <div class="comment" id="comment-@comment.COMMENTID">
                    <div>
                        <span class="comment-username" id="username-@comment.COMMENTID" data-userid="@comment.USERID">User</span>

                        <span class="comment-date">@comment.MODIFIED_DATE</span>
                    </div>
                    <div class="comment-text">@comment.COMMENT</div>
                </div>

                <script>
                    fetch('/User/GetUsernameByUserId?userId=@comment.USERID')
                        .then(res => res.text())
                        .then(name => {
                            const el = document.getElementById("username-@comment.COMMENTID");
                            if (el) el.textContent = name;
                        });
                </script>
            }
        }
        else
        {
            <p>No comments yet.</p>
        }
    </div>

    <a class="back-btn" href="/Blog/Index">← Back to All Blogs</a>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        // Theme setting
        if (localStorage.getItem("theme") === "dark") {
            document.body.classList.add("dark-mode");
        }

        // Set welcome text safely
        const username = localStorage.getItem("username") || "Guest";
        const welcomeEl = document.getElementById("welcome-text");
        if (welcomeEl) {
            welcomeEl.textContent = `Welcome, ${username}... 👋`;
        }

        // Unique user IDs (for author and comments)
        const userIds = [...new Set(Array.from(document.querySelectorAll("[data-userid]"))
            .map(el => el.getAttribute("data-userid")))];

        // Fetch all usernames in one go
        fetch("/User/GetAllUsernames")
            .then(res => res.json())
            .then(userMap => {
                // Update Author name
                const blogMeta = document.getElementById("blog-meta");
                const uid = blogMeta?.getAttribute("data-userid");
                if (uid && userMap[uid]) {
                    const parts = blogMeta.innerText.split("•");
                    blogMeta.innerText = `Author: ${userMap[uid]} • ${parts[1]}`;
                }

                // Update each comment username
                document.querySelectorAll("[data-userid]").forEach(el => {
                    const uid = el.getAttribute("data-userid");
                    if (uid && userMap[uid] && el.id !== "blog-meta") {
                        el.textContent = userMap[uid];
                    }
                });
            })
            .catch(err => console.error("Error fetching usernames:", err));
    });
</script>

